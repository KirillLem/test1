package task.dao;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;
import task.model.Account;

/**
 * This DAO provides key methods for saving and retrieving accounts.
 * The implementation is generated by mybatis framework.
 *
 * @author Anton Kotov (kotov-anton@yandex.ru)
 */
@Mapper
public interface AccountDao {

    /**
     * Select account by id.
     *
     * @param accountId account id
     * @return {@link Account} if account with provided {@code accountId} exists, {@code null} - otherwise.
     */
    @Results({
            @Result(property = "id", column = "id"),
            @Result(property = "amount", column = "amount"),

    })
    @Select("select id, amount from account where id = #{accountId}")
    Account select(@Param("accountId") long accountId);

    /**
     * Create new account with given amount. The method sets new generated account id to the {@code account} object.
     *
     * @param account account
     */
    @SelectKey(statement = "select account_id_seq.nextval from dual", keyProperty = "account.id", keyColumn = "id",
            before = true, resultType = long.class)
    @Insert("insert into account (id, amount) values (#{account.id}, #{account.amount})")
    void insert(@Param("account") Account account);

    /**
     * Update existing account with new amount value.
     *
     * @param account account
     * @return number of updated rows: 1 when account exists, 0 otherwise
     */
    @Update("update account set amount = #{account.amount} where id = #{account.id}")
    int update(@Param("account") Account account);

}
